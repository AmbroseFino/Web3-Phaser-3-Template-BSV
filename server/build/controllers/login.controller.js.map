{"version":3,"sources":["../../src/controllers/login.controller.js"],"names":["require","User","HandCashConnect","config","handCashConnect","appId","process","env","appSecret","module","exports","getBalance5","req","res","findById","user","_id","getAccountFromAuthToken","connectAuthToken","account","wallet","getSpendableBalance","balance","console","log","spendableSatoshiBalance","send","getLoginLink","next","getRedirectionUrl","redirectUrl","render","docTitle","path","getAuthenticate","authToken","query","profile","getCurrentProfile","publicProfile","handcashId","id","findOne","save","session","accessToken","generateAuthToken","redirect","getProfile"],"mappings":"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","sourcesContent":["const { User } = require(\"../models/user.model\");\nconst {HandCashConnect} = require('@handcash/handcash-connect');\nrequire('dotenv').config()\nconst handCashConnect = new HandCashConnect({ \n   appId: process.env.appId, \n   appSecret: process.env.appSecret,\n});\n\nmodule.exports.getBalance5 = async (req, res) => {\n\n  // fetch the authenticated user and their profile\n  const user = await User.findById(req.user._id);\n  const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n  var balance = await account.wallet.getSpendableBalance();\n  console.log(balance.spendableSatoshiBalance);\n\n  //send balance\n  res.send(`${balance.spendableSatoshiBalance}`)\n  }\n\n// login page\nmodule.exports.getLoginLink = async (req, res, next) => {\n\n  // fetch authentication url using the SDK\n  const redirectUrl = await handCashConnect.getRedirectionUrl();\n  \n  // return page with a login button\n  res.render('index', {\n    redirectUrl: redirectUrl,\n    docTitle: 'Login',\n    path: '/'\n  })\n};\n\n// authenticate\nmodule.exports.getAuthenticate = async (req, res, next) => {\n\n  // create a user upon a new login\n  const authToken = req.query.authToken;\n\n  // get user profile, and save alias to the user \n  const account = await handCashConnect.getAccountFromAuthToken(authToken);\n  const { publicProfile } = await account.profile.getCurrentProfile()\n  const handcashId = publicProfile.id\n\n\n  // check if the user exists, if not create a new one\n  let user = await User.findOne({handcashId: handcashId})\n  if(!user){\n    user = new User();\n    user.handcashId = handcashId\n  }\n\n  // update authToken\n  user.connectAuthToken = authToken\n  \n  // save user\n  await user.save();\n\n\n  // generating a jwt\n  req.session.accessToken = user.generateAuthToken();\n  res.redirect('/auth/game'); \n  \n};\n\n// returns user's information\nmodule.exports.getProfile = async (req, res) => {\n\n // create a user upon a new login\n const authToken = req.query.authToken;\n\n // get user profile, and save alias to the user \n const account = await handCashConnect.getAccountFromAuthToken(authToken);\n const { publicProfile } = await account.profile.getCurrentProfile()\n const handcashId = publicProfile.id\n\n // check if the user exists, if not create a new one\n let user = await User.findOne({handcashId: handcashId})\n if(!user){\n   user = new User();\n   user.handcashId = handcashId\n }\n\n // update authToken\n user.connectAuthToken = authToken\n \n // save user\n await user.save();\n\n // generating a jwt\n req.session.accessToken = user.generateAuthToken();\n\n}\n\n\n// // returns user's information\n// module.exports.getDashboard = async (req, res) => {\n\n//   // fetch the authenticated user and their profile\n//   const user = await User.findById(req.user._id);\n//   const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n//   const { publicProfile } = await account.profile.getCurrentProfile();\n//   const spendableBalance = await account.wallet.getSpendableBalance()\n//   const permissions = await account.profile.getPermissions()\n//   // print it out\n\n//   // display public profile\n//   res.render('dashboard', {\n//     publicProfile: publicProfile,\n//     spendableBalance: spendableBalance,\n//     permissions: permissions,\n//     path: '/dashboard'\n//   }) \n// }\n\n\n// // returns user's information\n// module.exports.getFriends = async (req, res) => {\n\n//   // fetch the authenticated user and their profile\n//   const user = await User.findById(req.user._id);\n//   const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n//   const friends = await account.profile.getFriends()\n\n//   // print it out\n//   console.log(friends)\n\n//   // display public profile\n//   res.render('friends', {\n//     friends: friends,\n//     path: '/friends'\n//   }) \n// }\n"],"file":"login.controller.js"}