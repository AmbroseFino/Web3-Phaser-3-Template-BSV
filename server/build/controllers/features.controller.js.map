{"version":3,"sources":["../../src/controllers/features.controller.js"],"names":["require","User","Rob","PrivateKey","PublicKey","ECIES","HandCashConnect","config","fetch","handCashConnect","appId","process","env","appSecret","parseHandleArray","handlesString","replace","split","parseHandle","handleString","ConvertStringToHex","str","arr","i","length","charCodeAt","toString","slice","join","ConvertHexToString","str1","hex","n","String","fromCharCode","parseInt","substr","module","exports","sendTransaction5","req","res","next","findById","user","_id","getAccountFromAuthToken","connectAuthToken","account","handle","amount","note","currencyCode","paymentParameters","description","payments","destination","sendAmount","wallet","pay","err","console","log","payment","send","sendTransaction25","sendTransaction50","sendTransaction100","sendWinner5","profile","getCurrentProfile","publicProfile","auth","rob","runonbsv","sendWinner25","sendWinner50","sendWinner100"],"mappings":"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":["const { User } = require(\"../models/user.model\");\nconst { Rob } = require(\"../models/rob.model\");\nconst { PrivateKey, PublicKey } = require('bsv');\nconst ECIES = require('bsv/ecies');\nconst {HandCashConnect} = require('@handcash/handcash-connect');\nrequire('dotenv').config()\nconst fetch = require('node-fetch');\n\nconst handCashConnect = new HandCashConnect({ \n  appId: process.env.appId, \n  appSecret: process.env.appSecret,\n});\n\nconst parseHandleArray = (handlesString) => handlesString.replace(/ /g, \"\").replace(/\\$/g, \"\").split(\",\")\n\nconst parseHandle = (handleString) => handleString.replace(/ /g, \"\").replace(/\\$/g, \"\")\n\nfunction ConvertStringToHex(str) {\n  var arr = [];\n  for (var i = 0; i < str.length; i++) {\n         arr[i] = (str.charCodeAt(i).toString(16)).slice(-4);\n  }\n  return arr.join(\"\");\n}\n\nfunction ConvertHexToString(str1) {\n\tvar hex  = str1.toString();\n\tvar str = '';\n\tfor (var n = 0; n < hex.length; n += 2) {\n\t\tstr += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n\t}\n\treturn str;\n}\n\n\n\n// sends a transaction on behalf of the user\nmodule.exports.sendTransaction5 = async (req, res, next) => {\n\n  // fetch the authenticated user and their profile\n  const user = await User.findById(req.user._id);\n  const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n\n  // define parameters \n  const handle = 'runonbsv'\n  const amount = 5\n  const note = 'Play Game'\n  const currencyCode = 'DUR'\n\n  // construct the payment\n  const paymentParameters = {\n    description: note,\n    payments:\n      [\n        {\n          destination: handle,\n          currencyCode: currencyCode,\n          sendAmount: amount,\n        },\n      ],\n  };\n\n// make the payment\nconst payment = await account.wallet.pay(paymentParameters).catch(err => {console.log(err)})\nres.send(payment)\nconsole.log(payment)\n}\n\nmodule.exports.sendTransaction25 = async (req, res, next) => {\n\n  // fetch the authenticated user and their profile\n  const user = await User.findById(req.user._id);\n  const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n\n  // define parameters \n  const handle = 'runonbsv'\n  const amount = 25\n  const note = 'Play Game'\n  const currencyCode = 'DUR'\n\n  // construct the payment\n  const paymentParameters = {\n    description: note,\n    payments:\n      [\n        {\n          destination: handle,\n          currencyCode: currencyCode,\n          sendAmount: amount,\n        },\n      ],\n  };\n  \n// make the payment\nconst payment = await account.wallet.pay(paymentParameters).catch(err => {console.log(err)})\nres.send(payment)\nconsole.log(payment)\n\n\n}\n\nmodule.exports.sendTransaction50 = async (req, res, next) => {\n\n  // fetch the authenticated user and their profile\n  const user = await User.findById(req.user._id);\n  const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n\n  // define parameters \n  const handle = 'runonbsv'\n  const amount = 50\n  const note = 'Play Game'\n  const currencyCode = 'DUR'\n\n  // construct the payment\n  const paymentParameters = {\n    description: note,\n    payments:\n      [\n        {\n          destination: handle,\n          currencyCode: currencyCode,\n          sendAmount: amount,\n        },\n      ],\n  };\n\n// make the payment\nconst payment = await account.wallet.pay(paymentParameters).catch(err => {console.log(err)})\nres.send(payment)\nconsole.log(payment)\n\n}\n\nmodule.exports.sendTransaction100 = async (req, res, next) => {\n\n  // fetch the authenticated user and their profile\n  const user = await User.findById(req.user._id);\n  const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n\n  // define parameters \n  const handle = 'runonbsv'\n  const amount = 100\n  const note = 'Play Game'\n  const currencyCode = 'DUR'\n\n  // construct the payment\n  const paymentParameters = {\n    description: note,\n    payments:\n      [\n        {\n          destination: handle,\n          currencyCode: currencyCode,\n          sendAmount: amount,\n        },\n      ],\n  };\n  \n// make the payment\nconst payment = await account.wallet.pay(paymentParameters).catch(err => {console.log(err)})\nres.send(payment)\nconsole.log(payment)\n\n}\n\n// sends a transaction on behalf of the ROB\nmodule.exports.sendWinner5 = async (req, res, next) => {\n\n  // fetch the authenticated user and their profile + handle\n  const user = await User.findById(req.user._id);\n  const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n  const { publicProfile } = await account.profile.getCurrentProfile();\n\n\n// fetch the bot profile\n  const rob = await User.findById(process.env.auth);\n  const runonbsv = await handCashConnect.getAccountFromAuthToken(rob.connectAuthToken);\n\n  // define parameters \n  const handle = `${publicProfile.handle}`\n  const amount = 20\n  const note = 'Run On BSV Winner!'\n  const currencyCode = 'DUR'\n\n  // construct the payment\n  const paymentParameters = {\n    description: note,\n    payments:\n      [\n        {\n          destination: handle,\n          currencyCode: currencyCode,\n          sendAmount: amount,\n        },\n      ],\n  };\n\n  // make the payment\n  const payment = await runonbsv.wallet.pay(paymentParameters).catch(err => {console.log(err)})\n  console.log(payment)\n\n}\n\nmodule.exports.sendWinner25 = async (req, res, next) => {\n\n  // fetch the authenticated user and their profile + handle\n  const user = await User.findById(req.user._id);\n  const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n  const { publicProfile } = await account.profile.getCurrentProfile();\n\n\n// fetch the bot profile\n  const rob = await User.findById(process.env.auth);\n  const runonbsv = await handCashConnect.getAccountFromAuthToken(rob.connectAuthToken);\n\n  // define parameters \n  const handle = `${publicProfile.handle}`\n  const amount = 100\n  const note = 'Run On BSV Winner!'\n  const currencyCode = 'DUR'\n\n  // construct the payment\n  const paymentParameters = {\n    description: note,\n    payments:\n      [\n        {\n          destination: handle,\n          currencyCode: currencyCode,\n          sendAmount: amount,\n        },\n      ],\n  };\n\n  // make the payment\n  const payment = await runonbsv.wallet.pay(paymentParameters).catch(err => {console.log(err)})\n  console.log(payment)\n}\n\nmodule.exports.sendWinner50 = async (req, res, next) => {\n\n  // fetch the authenticated user and their profile + handle\n  const user = await User.findById(req.user._id);\n  const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n  const { publicProfile } = await account.profile.getCurrentProfile();\n\n\n// fetch the bot profile\n  const rob = await User.findById(process.env.auth);\n  const runonbsv = await handCashConnect.getAccountFromAuthToken(rob.connectAuthToken);\n\n  // define parameters \n  const handle = `${publicProfile.handle}`\n  const amount = 200\n  const note = 'Run On BSV Winner!'\n  const currencyCode = 'DUR'\n\n  // construct the payment\n  const paymentParameters = {\n    description: note,\n    payments:\n      [\n        {\n          destination: handle,\n          currencyCode: currencyCode,\n          sendAmount: amount,\n        },\n      ],\n  };\n\n  // make the payment\n  const payment = await runonbsv.wallet.pay(paymentParameters).catch(err => {console.log(err)})\n  console.log(payment)\n}\n\nmodule.exports.sendWinner100 = async (req, res, next) => {\n\n  // fetch the authenticated user and their profile + handle\n  const user = await User.findById(req.user._id);\n  const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n  const { publicProfile } = await account.profile.getCurrentProfile();\n\n\n// fetch the bot profile\n  const rob = await User.findById(process.env.auth);\n  const runonbsv = await handCashConnect.getAccountFromAuthToken(rob.connectAuthToken);\n\n  // define parameters \n  const handle = `${publicProfile.handle}`\n  const amount = 400 \n  const note = 'Run On BSV Winner!'\n  const currencyCode = 'DUR'\n\n  // construct the payment\n  const paymentParameters = {\n    description: note,\n    payments:\n      [\n        {\n          destination: handle,\n          currencyCode: currencyCode,\n          sendAmount: amount,\n        },\n      ],\n  };\n\n  // make the payment\n  const payment = await runonbsv.wallet.pay(paymentParameters).catch(err => {console.log(err)})\n  console.log(payment)\n\n}\n\n// // sends a transaction on behalf of the user\n// module.exports.sendMultisendTransaction = async (req, res, next) => {\n//   console.log(\"here\")\n//   // fetch the authenticated user and their profile\n//   const user = await User.findById(req.user._id);\n//   const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n\n//   // define parameters \n//   const handles = parseHandleArray(req.body.handles)\n//   const amount = parseInt(req.body.amount)\n//   const note = req.body.note\n//   const currencyCode = 'DUR'\n\n//   const payments = handles.map(handle => {return {\n//     destination: handle,\n//     currencyCode: currencyCode,\n//     sendAmount: amount\n//   }})\n\n//   console.log(payments)\n//   // configure the payment\n//   const paymentParameters = {\n//     description: note,\n//     appAction: \"test-multi-send\",\n//     payments: payments\n//   };\n\n//   // make the payment\n//   const payment = await account.wallet.pay(paymentParameters)\n//   console.log(payment)\n\n//   // display public profile with the recent transaction\n//   res.redirect(\"/auth/get-transaction?txid=\" + payment.transactionId)\n// }\n\n// // sends a transaction on behalf of the user\n// module.exports.sendDataTransaction = async (req, res, next) => {\n\n//   // fetch the authenticated user and their profile\n//   const user = await User.findById(req.user._id);\n//   const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n//   const { publicProfile } = await account.profile.getCurrentProfile()\n\n//   // define parameters \n//   const handle = publicProfile.handle\n//   const amount = 500\n//   const note = 'Posting data to the chain'\n//   const data = ConvertStringToHex(req.body.text)\n//   console.log(data)\n//   const currencyCode = 'SAT'\n\n//   // construct the payment\n//   const paymentParameters = {\n//     description: note,\n//     payments:\n//       [\n//         {\n//           destination: handle,\n//           currencyCode: currencyCode,\n//           sendAmount: amount,\n//         },\n//       ],\n\n//     //attachment: { format: 'base64', value: 'ABEiM0RVZneImQCqu8zd7v8=' },\n//     attachment: { format: 'hex', value: data },\n//   };\n\n//   // make the payment\n//   const payment = await account.wallet.pay(paymentParameters).catch(err => console.log(err))\n\n//   // display public profile with the recent transaction\n//   res.redirect(\"/auth/get-transaction?txid=\" + payment.transactionId)\n// }\n\n// // sends a transaction on behalf of the user\n// module.exports.getTransaction = async (req, res, next) => {\n\n//   // fetch the authenticated user and their profile\n//   const user = await User.findById(req.user._id);\n//   const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n//   const paymentResult = await account.wallet.getPayment(req.query.txid)\n \n//   paymentResult.attachments = paymentResult.attachments.map(attachment => {\n//     if(attachment.format == 'hex') \n//       attachment.hexValue = ConvertHexToString(attachment.value)\n//     return attachment\n//   })\n  \n//   console.log(paymentResult)\n  \n//   // display public profile with the recent transaction\n//   res.render('transaction', {\n//     tx: paymentResult,\n//     path: '/transaction'\n//   })\n// }\n\n// // sends a transaction on behalf of the user\n// module.exports.postEncrypt = async (req, res, next) => {\n\n//   // fetch the authenticated user and their profile\n//   const user = await User.findById(req.user._id);\n//   const account = await handCashConnect.getAccountFromAuthToken(user.connectAuthToken);\n\n//   const { publicKey, privateKey } = await account.profile.getEncryptionKeypair();\n//   console.log(publicKey);\n\n//   const ecPrivateKey = PrivateKey.fromWIF(privateKey);\n//   const ecPublicKey = PublicKey.fromString(publicKey);\n//   const plainText = req.body.encryptText;\n\n//   const encryptedBuffer = ECIES().publicKey(ecPublicKey).encrypt(plainText);\n//   console.log(encryptedBuffer.toString('base64'));\n\n//   const decryptedBuffer = ECIES().privateKey(ecPrivateKey).decrypt(encryptedBuffer);\n//   console.log(decryptedBuffer.toString('utf8'));\n\n//   console.assert(decryptedBuffer.toString('utf8') == plainText);\n\n//   // display public profile with the recent transaction\n//   res.render('encryption', {\n//     encryptionDetails: {\n//       ecPrivateKey: ecPrivateKey,\n//       ecPublicKey: ecPublicKey,\n//       plainText: plainText,\n//       encryptedBuffer: encryptedBuffer.toString('hex'),\n//       decryptedBuffer: decryptedBuffer\n//     },\n//     path: '/encryption'\n//   })\n// }"],"file":"features.controller.js"}